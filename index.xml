<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Changelog</title><link>https://www.changelog.com.cn/</link><description>Recent content on Changelog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 28 Jun 2022 20:08:11 +0800</lastBuildDate><atom:link href="https://www.changelog.com.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 如何处理 SQL 中的 NULL</title><link>https://www.changelog.com.cn/posts/sql-null-golang/</link><pubDate>Tue, 28 Jun 2022 20:08:11 +0800</pubDate><guid>https://www.changelog.com.cn/posts/sql-null-golang/</guid><description>如果你用 Go 操作过 MySQL，那你就知道 NULL 有多烦人了，当数据库中某个字段的值是 NULL 时，你可能会遇到一些问题。
database/sql 包会将 NULL 转换为 nil，但是它不能赋值给 int、float64、string、bool 等类型。
这篇文章介绍几个处理 MySQL 中的 NULL 值的方法。
0）为什么需要特别关注 NULL 在 Go 中，每个类型都有一个 零 值，声明一个变量不指定值，则变量会被初始化为零值。
var i int fmt.Printf(&amp;#34;%#v\n&amp;#34;, i) // =&amp;gt; 0 var s string fmt.Printf(&amp;#34;%#v\n&amp;#34;, s) // =&amp;gt; &amp;#34;&amp;#34; 特别的是指针，它的零值是 nil。
var p *int fmt.Printf(&amp;#34;%#v\n&amp;#34;, p) // =&amp;gt; nil 你不能用 nil 指针做任何事，例如下面的代码会 panic。
fmt.Printf(&amp;#34;%#v\n&amp;#34;, *p) // =&amp;gt; 💥 类似的，结构体中的每个字段都有一个零值
type R struct { i int s string p *int } var r R fmt.</description></item><item><title>Contact</title><link>https://www.changelog.com.cn/contact/</link><pubDate>Tue, 28 Jun 2022 14:54:33 +0800</pubDate><guid>https://www.changelog.com.cn/contact/</guid><description>Email: hello at changelog.com.cn</description></item><item><title>First Post</title><link>https://www.changelog.com.cn/posts/first-post/</link><pubDate>Tue, 28 Jun 2022 10:13:16 +0800</pubDate><guid>https://www.changelog.com.cn/posts/first-post/</guid><description>Hello world!</description></item></channel></rss>